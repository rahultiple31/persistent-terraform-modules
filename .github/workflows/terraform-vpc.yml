name: Terraform VPC ‚Äî Manual Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select the environment to deploy"
        required: true
        type: choice
        options:
          - dev
          - qa
          - prod
      action:
        description: "Select Terraform action"
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  contents: read
  id-token: write
  actions: read

concurrency:
  group: terraform-vpc-${{ github.event.inputs.environment }}
  cancel-in-progress: true

env:
  AWS_REGION: eu-west-1
  TF_VERSION: 1.5.0

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üìÅ Define environment variables
        id: vars
        run: |
          ENV_NAME=${{ github.event.inputs.environment }}
          ACTION=${{ github.event.inputs.action }}
          WORKDIR="infrastructure/${ENV_NAME}/vpc"
          STATE_KEY="state/${ENV_NAME}/vpc/terraform.tfstate"
          PLAN_S3_PATH="plans/${ENV_NAME}/vpc-plan.tfplan"

          echo "ENV_NAME=${ENV_NAME}" >> $GITHUB_ENV
          echo "ACTION=${ACTION}" >> $GITHUB_ENV
          echo "WORKDIR=${WORKDIR}" >> $GITHUB_ENV
          echo "STATE_KEY=${STATE_KEY}" >> $GITHUB_ENV
          echo "PLAN_S3_PATH=${PLAN_S3_PATH}" >> $GITHUB_ENV

      - name: üß± Terraform Init
        working-directory: ${{ env.WORKDIR }}
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: üß© Terraform Format & Validate
        working-directory: ${{ env.WORKDIR }}
        run: |
          terraform fmt -check || true
          terraform fmt
          terraform validate

      - name: üßÆ Terraform Plan
        if: ${{ env.ACTION == 'plan' }}
        working-directory: ${{ env.WORKDIR }}
        run: |
          terraform plan \
            -input=false \
            -var-file="terraform.tfvars" \
            -out=tfplan
          terraform show -no-color tfplan > plan-output.txt
          aws s3 cp tfplan s3://terraform-plans-modules/${{ env.PLAN_S3_PATH }}
          aws s3 cp plan-output.txt s3://terraform-plans-modules/plans/${{ env.ENV_NAME }}/plan-output.txt

      - name: ‚òÅÔ∏è Download Plan from S3
        if: ${{ env.ACTION == 'apply' }}
        working-directory: ${{ env.WORKDIR }}
        run: |
          aws s3 cp s3://terraform-plans-modules/${{ env.PLAN_S3_PATH }} tfplan

      - name: üöÄ Terraform Apply
        if: ${{ env.ACTION == 'apply' }}
        working-directory: ${{ env.WORKDIR }}
        run: |
          terraform apply -input=false -auto-approve tfplan

      - name: üí• Terraform Destroy
        if: ${{ env.ACTION == 'destroy' }}
        working-directory: ${{ env.WORKDIR }}
        run: |
          terraform destroy -input=false \
            -var-file="terraform.tfvars" \
            -auto-approve
